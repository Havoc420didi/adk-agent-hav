---
description: 当需要配置和使用测试文件。
globs: 
alwaysApply: false
---
# 测试文件配置与使用规范

## 测试文件目录结构

### 主要测试目录
- `tests/havoc/` - 用户自定义测试和快速验证
- `tests/integration/` - 集成测试
- `tests/unittests/` - 单元测试

### 测试文件组织方式

#### 1. 自定义测试目录 (`tests/havoc/`)
```
tests/havoc/
├── __init__.py           # 包初始化文件
├── README.md             # 测试说明文档
├── test_setup.py         # 环境设置测试
├── test_cleanup.py       # 清理功能测试
├── quick_start.py        # 快速启动测试
└── run_tests.py          # 测试运行器
```

#### 2. 测试文件命名规范
- 功能测试：`test_<功能名称>.py`
- 设置测试：`test_setup.py`
- 清理测试：`test_cleanup.py`
- 快速测试：`quick_start.py`
- 测试运行器：`run_tests.py`

## 测试文件标准模板

### 基础测试文件结构
```python
#!/usr/bin/env python
"""
测试说明：<测试目的>
创建时间：<创建日期>
"""

import sys
import os
from pathlib import Path

# 添加项目根目录到 Python 路径
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# 导入必要的模块
from src.google.adk import <相关模块>

def test_<功能名称>():
    """测试<功能描述>"""
    # 测试实现
    pass

if __name__ == "__main__":
    # 执行测试
    test_<功能名称>()
    print("✅ 测试完成")
```

### 测试运行器模板
```python
#!/usr/bin/env python
"""
测试运行器 - 执行所有测试
"""

import sys
from pathlib import Path

def run_all_tests():
    """运行所有测试"""
    test_files = [
        "test_setup.py",
        "test_cleanup.py", 
        "quick_start.py"
    ]
    
    current_dir = Path(__file__).parent
    
    for test_file in test_files:
        test_path = current_dir / test_file
        if test_path.exists():
            print(f"\n🔧 运行测试: {test_file}")
            # 执行测试文件
        else:
            print(f"❌ 测试文件不存在: {test_file}")

if __name__ == "__main__":
    run_all_tests()
```

## 测试最佳实践

### 1. 文件组织
- 每个测试目录必须包含 `__init__.py` 文件
- 提供 `README.md` 说明测试用途和使用方法
- 创建统一的测试运行器 (`run_tests.py`)

### 2. 路径处理
- 使用相对路径引用项目根目录
- 动态添加项目路径到 `sys.path`
- 使用 `pathlib.Path` 处理文件路径

### 3. 错误处理
- 提供清晰的错误信息和成功提示
- 使用 emoji 标识测试状态 (✅ ❌ 🔧)
- 捕获并处理常见异常

### 4. 环境管理
- 测试前验证环境配置
- 提供清理功能恢复测试环境
- 支持独立运行每个测试文件

### 5. 文档要求
- 每个测试文件包含文档字符串
- 说明测试目的和预期结果
- 提供使用示例和注意事项

## 使用指南

### 创建新测试
1. 在相应测试目录下创建测试文件
2. 遵循命名规范和模板结构
3. 更新 `run_tests.py` 包含新测试
4. 更新 `README.md` 文档

### 运行测试
```bash
# 运行单个测试
python tests/havoc/test_setup.py

# 运行所有测试
python tests/havoc/run_tests.py

# 快速验证
python tests/havoc/quick_start.py
```

### 测试环境清理
```bash
# 清理测试环境
python tests/havoc/test_cleanup.py
```
